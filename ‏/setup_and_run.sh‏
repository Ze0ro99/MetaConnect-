#!/bin/bash

# Step 1: Update and upgrade Termux packages
echo "Updating and upgrading Termux packages..."
pkg update -y
pkg upgrade -y

# Step 2: Install necessary packages
echo "Installing necessary packages..."
pkg install -y git nodejs nano

# Step 3: Clone the MetaConnect repository
REPO_URL="https://github.com/Ze0ro99/MetaConnect-.git"
REPO_DIR="MetaConnect-"

if [ -d "$REPO_DIR" ]; then
  echo "Directory $REPO_DIR already exists. Skipping clone."
else
  echo "Cloning the repository..."
  git clone $REPO_URL
fi

# Step 4: Navigate to the backend directory and install dependencies
cd MetaConnect-/backend
echo "Installing backend dependencies..."
npm install

# Step 5: Create and edit the .env file
echo "Creating .env file..."
cat <<EOL > .env
MONGO_URI=your_actual_mongodb_connection_string
PORT=5000
EOL

# Step 6: Install the missing 'cors' module
echo "Installing 'cors' module..."
npm install cors

# Step 7: Update all dependencies to the latest version
echo "Updating all dependencies to the latest version..."
npm install -g npm-check-updates
ncu -u
npm install

# Step 8: Fix errors using ESLint and Prettier
echo "Fixing errors using ESLint and Prettier..."
npm install eslint prettier --save-dev

# Create ESLint configuration file
cat <<EOL > eslint.config.js
export default [
  {
    files: ["**/*.js"],
    languageOptions: {
      globals: {
        // Define global variables here
      },
    },
    rules: {
      // Define your rules here
    },
  },
];
EOL

npx eslint --fix .
npx prettier --write .

# Step 9: Add test scripts and install Jest
echo "Adding test scripts and installing Jest..."
npm install jest --save-dev

# Update package.json to include test script
cat <<EOL > package.json
{
  "name": "metaconnect",
  "version": "1.0.0",
  "description": "Metaconnect هو مشروع لتطوير تطبيق ويب يستخدم Express وMongoose لإنشاء واجهة برمجة التطبيقات (API) تدعم عمليات CRUD.",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "test": "jest",
    "dev": "nodemon index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Ze0ro99/metaconnect.git"
  },
  "keywords": ["تطبيق ويب", "API", "Express", "Mongoose", "CRUD"],
  "author": "Ze0ro99",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^8.9.5",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.1.9",
    "eslint": "^9.18.0",
    "prettier": "^2.8.3",
    "jest": "^29.4.2"
  }
}
EOL

# Step 10: Run tests to ensure everything is working
echo "Running tests to ensure everything is working..."
npm test

# Step 11: Create the missing 'routes/transactions' file
echo "Creating 'routes/transactions' file..."
mkdir -p routes
cat <<EOL > routes/transactions.js
const express = require('express');
const router = express.Router();
const Transaction = require('../models/Transaction');
const User = require('../models/User');

// Deposit route
router.post('/deposit', async (req, res) => {
  try {
    const { userId, amount } = req.body;
    const newTransaction = new Transaction({ user: userId, amount, type: 'deposit' });
    await newTransaction.save();
    await User.findByIdAndUpdate(userId, { $inc: { balance: amount } });
    res.status(200).json({ message: 'Deposit successful', transaction: newTransaction });
  } catch (error) {
    res.status(500).json({ message: 'Error processing deposit', error });
  }
});

// Withdrawal route
router.post('/withdraw', async (req, res) => {
  try {
    const { userId, amount } = req.body;
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    if (user.balance < amount) {
      return res.status(400).json({ message: 'Insufficient balance' });
    }
    const newTransaction = new Transaction({ user: userId, amount, type: 'withdrawal' });
    await newTransaction.save();
    await User.findByIdAndUpdate(userId, { $inc: { balance: -amount } });
    res.status(200).json({ message: 'Withdrawal successful', transaction: newTransaction });
  } catch (error) {
    res.status(500).json({ message: 'Error processing withdrawal', error });
  }
});

module.exports = router;
EOL

# Step 12: Fix the syntax error in server.js
echo "Fixing syntax error in server.js..."
sed -i "12s/.*/mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })/" server.js

# Step 13: Generate package-lock.json file
echo "Generating package-lock.json file..."
npm install

# Step 14: Commit and push the lock file to the repository
echo "Committing and pushing the lock file to the repository..."
git add package-lock.json
git commit -m "Add package-lock.json file"
git push origin main

# Step 15: Start the backend server
echo "Starting the backend server..."
node server.js

echo "Script completed successfully."